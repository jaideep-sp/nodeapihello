name: Deploy Node.js to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
      
    - name: Build
      run: npm run build --if-present
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install dependencies if they don't exist
          if ! command -v git &> /dev/null; then
            echo "Installing Git..."
            if [ -f /etc/redhat-release ] || [ -f /etc/amazon-release ]; then
              # Amazon Linux, RHEL, CentOS
              sudo yum update -y
              sudo yum install git -y
            else
              # Ubuntu, Debian
              sudo apt update -y
              sudo apt install git -y
            fi
          fi
          
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js 20.x..."
            if [ -f /etc/redhat-release ] || [ -f /etc/amazon-release ]; then
              # Amazon Linux, RHEL, CentOS
              curl -sL https://rpm.nodesource.com/setup_20.x | sudo bash -
              sudo yum install -y nodejs
            else
              # Ubuntu, Debian
              curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt install -y nodejs
            fi
          fi
          
          # Install PM2 globally if not already installed
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2 globally..."
            npm install -g pm2
          fi
          
          # Print versions for verification
          git --version
          node --version
          npm --version
          pm2 --version
          
          # Ensure deployment directory exists
          mkdir -p /home/ec2-user/nodeapihello
          cd /home/ec2-user/nodeapihello
          
          # Check if .git directory exists to determine if it's a git repository
          if [ -d ".git" ]; then
            # It's a git repo, try to update it
            echo "Repository exists, updating..."
            git fetch origin
            git reset --hard origin/main
          else
            # If directory is not empty but not a git repo, clean it up
            if [ "$(ls -A .)" ]; then
              echo "Directory not empty. Clearing directory..."
              rm -rf ./* ./.[!.]*
            fi
            # Clone the repository
            echo "Cloning fresh repository..."
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # Install dependencies - using npm install instead of npm ci for projects without package-lock.json
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci..."
            npm ci
          else
            echo "No package-lock.json found, using npm install..."
            npm install
          fi
          
          # Build if a build script exists
          npm run build --if-present
          
          # Stop any existing PM2 process with the same name
          echo "Checking for existing PM2 processes for node-app..."
          pm2 delete node-app || echo "No existing process to delete"
          
          # Wait a moment to ensure port is released
          sleep 3
          
          # Start the application with PM2
          echo "Starting application with PM2..."
          
          pm2 start npm --name "node-app" -- run start
          
          
          # Save PM2 process list to resurrect processes after reboot
          pm2 save
          
          # Ensure PM2 starts on system boot
          pm2 startup | tail -n 1 | bash || echo "PM2 startup configuration already exists"
          
          echo "Deployment completed successfully"
